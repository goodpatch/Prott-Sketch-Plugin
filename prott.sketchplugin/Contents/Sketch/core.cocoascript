/*The MIT License (MIT)

Copyright (c) 2015 Goodpatch, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.*/

var prott = {
    "definations": {
        "pluginVersion": "Version 2.0.8",
        "apiBase": "https://prottapp.com/",
        "apiSignin": "users/sign_in.json",
        "apiSignout": "users/sign_out.json",
        "apiProjects": "api/sketch_app/projects.json",
        "apiScreens": "api/sketch_app/screens.json",
        "uploadToAppBase": "/Library/Application Support/com.goodpatch.prott.editor/toApp/",
        "uploadToPluginBase": "/Library/Application Support/com.goodpatch.prott.editor/toPlugin/",
        "ratioItems": [
            {"name": "0.5x", "value": "0.5"},
            {"name": "1x", "value": "1"},
            {"name": "1.5x", "value": "1.5"},
            {"name": "2x", "value": "2"},
            {"name": "3x", "value": "3"},
            {"name": "4x", "value": "4"}
        ]
    },

    "getUnarchivedObjectFromData": function(data){
        return [NSKeyedUnarchiver unarchiveObjectWithData:data]
    },

    "setArchivedObjectForData": function(data){
        return [NSKeyedArchiver archivedDataWithRootObject:data]
    },

    "getSavedValueFromKey": function(key){
        return [[NSUserDefaults standardUserDefaults] objectForKey:key]
    },

    "saveValueForKey": function(value, key){
        [[NSUserDefaults standardUserDefaults] setObject:value forKey:key]
        [[NSUserDefaults standardUserDefaults] synchronize]
    },

    "isUpdated": function(){
        var version = prott.getSavedValueFromKey("currentVersion")
        if (version == nil) { return true }
        return ![version isEqualToString: prott.definations.pluginVersion]
    },

    "getSavedCookie": function(){
        var cookieSaved = prott.getSavedValueFromKey("cookie")
        return prott.getUnarchivedObjectFromData(cookieSaved)
    },

    "getSavedprojects": function(){
        var projectsSaved = prott.getSavedValueFromKey("projects")
        return prott.getUnarchivedObjectFromData(projectsSaved)
    },

    "showMessage": function(message, context){
        var doc = context.document
        [doc showMessage:message]
    },

    "showAlert": function(message, context){
        var alert = NSAlert.alloc().init()
        var plugin = context.plugin
        var imageFilePath=[plugin urlForResourceNamed:"logo.png"]
        var imageData = [NSData dataWithContentsOfURL:imageFilePath]
        var image = NSImage.alloc().initWithData(imageData)
        alert.setIcon(image)
        alert.setMessageText(message)
        alert.addButtonWithTitle("OK")
        alert.runModal()
    },

    "showLoginDialog": function(context){
        var accessoryView = NSView.alloc().initWithFrame(NSMakeRect(0.0, 0.0, 260.0, 50.0))

        var emailInputField = NSTextField.alloc().initWithFrame(NSMakeRect(0.0, 30.0, 260.0, 20.0))
        emailInputField.cell().setPlaceholderString("Email")
        accessoryView.addSubview(emailInputField)

        var passwordInputField = NSSecureTextField.alloc().initWithFrame(NSMakeRect(0.0, 0.0, 260.0, 20.0))
        passwordInputField.cell().setPlaceholderString("Password")
        accessoryView.addSubview(passwordInputField)

        var alert = NSAlert.alloc().init()
        alert.addButtonWithTitle("Login")
        alert.addButtonWithTitle("Cancel")
        alert.setAccessoryView(accessoryView)
        alert.setMessageText("Log into Prott")
        
        [[alert window] setInitialFirstResponder:emailInputField]
        [emailInputField setNextKeyView:passwordInputField]

        var plugin = context.plugin
        var imageFilePath=[plugin urlForResourceNamed:"logo.png"]
        var imageData = [NSData dataWithContentsOfURL:imageFilePath]
        var image = NSImage.alloc().initWithData(imageData)
        alert.setIcon(image)

        var responseCode = alert.runModal()
        return [responseCode, emailInputField.stringValue(), passwordInputField.stringValue()]
    },

    "showOptionDialog": function(context, isAllArtboardSync){
        var optionWindow = NSWindow.alloc().init()
        if(isAllArtboardSync){
            [optionWindow setTitle:"Sync All Artboards to Prott"]
        }else{
            [optionWindow setTitle:"Sync Selected Artboards to Prott"]
        }
        [optionWindow setFrame:NSMakeRect(0, 0, 523, 236) display:true]

        var accessoryView = NSView.alloc().initWithFrame(NSMakeRect(0.0, 0.0, 503.0, 256.0))
        var plugin = context.plugin
        var imageFilePath=[plugin urlForResourceNamed:"logo@2x.png"]
        var imageData = [NSData dataWithContentsOfURL:imageFilePath]
        var image = NSImage.alloc().initWithData(imageData)
        var imageView = [[NSImageView alloc] initWithFrame:NSMakeRect(20.0, 122.0, 80.0, 80.0)]
        [imageView setImage: image]
        accessoryView.addSubview(imageView)

        var syncOptionsBox = NSBox.alloc().initWithFrame(NSMakeRect(117.0, 46.0, 400.0, 166.0))
        [syncOptionsBox setTitle:""]
        accessoryView.addSubview(syncOptionsBox)

        var projectsListButton = NSPopUpButton.alloc().initWithFrame(NSMakeRect(134.0, 112.0, 240.0, 26.0))
        [projectsListButton setNeedsDisplay:true]
        var projects = prott.getSavedprojects()
        var projectsList = []
        var menu = NSMenu.alloc().init()
        var separateFlg = false

        if (prott.getSavedValueFromKey("UploadPlatform") == 1) {
            projectsList = prott.getAppProjectList()
            menu = prott.getAppProjectListMenu()
        } else {
            for(organzation in projects){
                if (projects[organzation].projects.count() == 0) {
                    continue
                }
                if (separateFlg) {
                    projectsList.push({name: "separate", id: nil})
                    [menu addItem:[NSMenuItem separatorItem]]
                }else{
                    separateFlg = true
                }

                var accountMenuItem = [[NSMenuItem alloc] initWithTitle:projects[organzation].name action:nil keyEquivalent:""]
                [accountMenuItem setEnabled:false]
                [menu addItem:accountMenuItem]
                projectsList.push({name: projects[organzation].name, id: nil})

                for(i = 0; i < projects[organzation].projects.count(); i++){
                    var projectMenuItem = [[NSMenuItem alloc] initWithTitle:projects[organzation].projects[i].name action:nil keyEquivalent:""]
                    [projectMenuItem setIndentationLevel:1]
                    [menu addItem:projectMenuItem]
                    projectsList.push({name: projects[organzation].projects[i].name, id: projects[organzation].projects[i].id})
                }
            }
        }
        
        [menu setAutoenablesItems:false]
        [projectsListButton setMenu:menu]
        if(prott.getSavedValueFromKey("projectToSyncIndex")){
            [projectsListButton selectItemAtIndex:prott.getSavedValueFromKey("projectToSyncIndex")]
        } else {
            [projectsListButton selectItemAtIndex:1]
        }
        syncOptionsBox.addSubview(projectsListButton)

        var selectProjectsLabel = NSTextField.alloc().initWithFrame(NSMakeRect(12.0, 108.0, 110.0, 26.0))
        [selectProjectsLabel setEditable:false]
        [selectProjectsLabel setBordered:false]
        [selectProjectsLabel setDrawsBackground:false]
        [selectProjectsLabel setStringValue:"Select project:"]
        [selectProjectsLabel setAlignment:1]
        syncOptionsBox.addSubview(selectProjectsLabel)

        var ratioLabel = NSTextField.alloc().initWithFrame(NSMakeRect(12.0, 48.0, 110.0, 26.0))
        [ratioLabel setEditable:false]
        [ratioLabel setBordered:false]
        [ratioLabel setDrawsBackground:false]
        [ratioLabel setStringValue:"Image ratio:"]
        [ratioLabel setAlignment:1]
        syncOptionsBox.addSubview(ratioLabel)

        var ratioList = NSPopUpButton.alloc().initWithFrame(NSMakeRect(134.0, 52.0, 80.0, 26.0))
        for(var i in prott.definations.ratioItems){
            var menuItem = [[NSMenuItem alloc] initWithTitle:prott.definations.ratioItems[i].name action:nil keyEquivalent:""]
            [[ratioList menu] addItem:menuItem]
        }
        if(prott.getSavedValueFromKey("ratioIndex")){
            [ratioList selectItemAtIndex:prott.getSavedValueFromKey("ratioIndex")]
        }else{
            [ratioList selectItemAtIndex:1]
        }
        syncOptionsBox.addSubview(ratioList)

        var syncOptionsLine = NSBox.alloc().initWithFrame(NSMakeRect(12.0, 35.0, 360.0, 4.0))
        [syncOptionsLine setTitle:""]
        syncOptionsBox.addSubview(syncOptionsLine)

        var accountLabel = NSTextField.alloc().initWithFrame(NSMakeRect(12.0, 0.0, 110.0, 26.0))
        [accountLabel setEditable:false]
        [accountLabel setBordered:false]
        [accountLabel setDrawsBackground:false]
        [accountLabel setStringValue:"Account:"]
        [accountLabel setAlignment:1]
        syncOptionsBox.addSubview(accountLabel)

        var accountInfo = NSTextField.alloc().initWithFrame(NSMakeRect(136.0, 0.0, 240.0, 26.0))
        [accountInfo setEditable:false]
        [accountInfo setBordered:false]
        [accountInfo setDrawsBackground:false]
        
        // NSAppKitVersionNumber10_10 = 1343
        if (NSAppKitVersionNumber >= 1343) {
            [accountInfo setLineBreakMode:NSLineBreakByTruncatingTail]
        }
        [accountInfo setStringValue:prott.getSavedValueFromKey("accountInfo")]
        syncOptionsBox.addSubview(accountInfo)

        var versionLabel = NSTextField.alloc().initWithFrame(NSMakeRect(0.0, 8.0, 200.0, 26.0))
        [versionLabel setEditable:false]
        [versionLabel setBordered:false]
        if (NSAppKitVersionNumber >= 1343) {
            [versionLabel setTextColor:[NSColor grayColor]]
        }
        [versionLabel setDrawsBackground:false]
        [versionLabel setStringValue:prott.definations.pluginVersion]
        [versionLabel setAlignment:1]
        accessoryView.addSubview(versionLabel)

        var cancelButton = NSButton.alloc().initWithFrame(NSMakeRect(293.0, 10.0, 110.0, 26.0))
        [cancelButton setTitle:"Cancel"]
        [cancelButton setBezelStyle:NSRoundedBezelStyle]
        [cancelButton setCOSJSTargetFunction:function(sender) {
            if(projectsList[0] != nil) {
                if(projectsList[[projectsListButton indexOfSelectedItem]].id){
                    prott.saveValueForKey(projectsList[[projectsListButton indexOfSelectedItem]].id, "projectToSync")
                    prott.saveValueForKey([projectsListButton indexOfSelectedItem], "projectToSyncIndex")
                    prott.saveValueForKey(prott.definations.ratioItems[[ratioList indexOfSelectedItem]].value, "ratio")
                    prott.saveValueForKey([ratioList indexOfSelectedItem], "ratioIndex")
                }
            }

            [[NSApplication sharedApplication] stopModal]
            [optionWindow orderOut:self]
            [projectsListButton setCOSJSTargetFunction:undefined]
            [refreshProjectsButton setCOSJSTargetFunction:undefined]
            [cancelButton setCOSJSTargetFunction:undefined]
        }]
        accessoryView.addSubview(cancelButton)

        var syncButton = NSButton.alloc().initWithFrame(NSMakeRect(407.0, 10.0, 110.0, 26.0))
        [syncButton setKeyEquivalent:"\r"]
        [syncButton setTitle:"Sync"]
        [syncButton setEnabled: (projectsList[0] != nil)]
        [syncButton setBezelStyle:NSRoundedBezelStyle]
        [syncButton setCOSJSTargetFunction:function(sender) {
            if(projectsList[0] != nil) {
                if(projectsList[[projectsListButton indexOfSelectedItem]].id){
                    prott.saveValueForKey(projectsList[[projectsListButton indexOfSelectedItem]].id, "projectToSync")
                    prott.saveValueForKey([projectsListButton indexOfSelectedItem], "projectToSyncIndex")
                    prott.saveValueForKey(prott.definations.ratioItems[[ratioList indexOfSelectedItem]].value, "ratio")
                    prott.saveValueForKey([ratioList indexOfSelectedItem], "ratioIndex")
                }
            }
            [[NSApplication sharedApplication] stopModal]
            if(isAllArtboardSync) {
                prott.syncAllArtboards(context)
            }else{
                prott.syncSelectedArtboards(context)
            }
            [optionWindow orderOut:self]
            [projectsListButton setCOSJSTargetFunction:undefined]
            [refreshProjectsButton setCOSJSTargetFunction:undefined]
            [syncButton setCOSJSTargetFunction:undefined]
        }]
        accessoryView.addSubview(syncButton)

        projectsList = prott.getProjectList(false)
        menu = prott.getProjectListMenu(false)
        [projectsListButton removeAllItems]
        [projectsListButton setMenu:menu]

        if(prott.getSavedValueFromKey("projectToSyncIndex")){
            if (prott.getSavedValueFromKey("projectToSyncIndex") == 0) {
                [projectsListButton selectItemAtIndex:1]
            } else {
                [projectsListButton selectItemAtIndex:prott.getSavedValueFromKey("projectToSyncIndex")]
            }
        } else {
            [projectsListButton selectItemAtIndex:1]
        }
        prott.saveValueForKey(0, "UploadPlatform")

        var refreshProjectsButton = NSButton.alloc().initWithFrame(NSMakeRect(130.0, 81.0, 160.0, 26.0))
        [refreshProjectsButton setTitle:"Refresh projects list"]
        [refreshProjectsButton setBezelStyle:NSRoundedBezelStyle]
        [refreshProjectsButton setCOSJSTargetFunction:function(sender) {
            prott.getProjectsFromServer()

            projects = prott.getSavedprojects()
            projectsList = []
            var menu = NSMenu.alloc().init()
            separateFlg = false
            for(organzation in projects){
                if (projects[organzation].projects.count() == 0) {
                    continue
                }
                if (separateFlg) {
                    projectsList.push({name: "separate", id: nil})
                    [menu addItem:[NSMenuItem separatorItem]]
                }else{
                    separateFlg = true
                }

                var accountMenuItem = [[NSMenuItem alloc] initWithTitle:projects[organzation].name action:nil keyEquivalent:""]
                [accountMenuItem setEnabled:false]
                [menu addItem:accountMenuItem]
                projectsList.push({name: projects[organzation].name, id: nil})

                for(i = 0; i < projects[organzation].projects.count(); i++){
                    var projectMenuItem = [[NSMenuItem alloc] initWithTitle:"    "+projects[organzation].projects[i].name action:nil keyEquivalent:""]
                    [menu addItem:projectMenuItem]
                    projectsList.push({name: projects[organzation].projects[i].name, id: projects[organzation].projects[i].id})
                }
            }
            [menu setAutoenablesItems:false]
            [projectsListButton setMenu:menu]
            if(prott.getSavedValueFromKey("projectToSyncIndex")){
                [projectsListButton selectItemAtIndex:prott.getSavedValueFromKey("projectToSyncIndex")]
            }else{
                [projectsListButton selectItemAtIndex:1]
            }
        }]
        syncOptionsBox.addSubview(refreshProjectsButton)

        if(projects == nil || projects.count() == 0){
            prott.showAlert("It seems you don't have any projects. Go to https://prottapp.com and create one, then click the 'Refresh projects list' button from the options.", context)
        }
        [optionWindow setContentView:accessoryView]
        [[NSApplication sharedApplication] runModalForWindow:optionWindow]
    },

    "getProjectListMenu": function(refleshFlg){
        if (refleshFlg) {
            prott.getProjectsFromServer()
        }

        var projects = prott.getSavedprojects()
        var menu = NSMenu.alloc().init()
        var separateFlg = false
        for(organzation in projects){
            if (projects[organzation].projects.count() == 0) {
                continue
            }
            if (separateFlg) {
                [menu addItem:[NSMenuItem separatorItem]]
            }else{
                separateFlg = true
            }

            var accountMenuItem = [[NSMenuItem alloc] initWithTitle:projects[organzation].name action:nil keyEquivalent:""]
            [accountMenuItem setEnabled:false]
            [menu addItem:accountMenuItem]

            for(i = 0; i < projects[organzation].projects.count(); i++){
                var projectMenuItem = [[NSMenuItem alloc] initWithTitle:"    "+projects[organzation].projects[i].name action:nil keyEquivalent:""]
                [menu addItem:projectMenuItem]
            }
        }
        [menu setAutoenablesItems:false]
        return menu
    },

    "getProjectList": function(refleshFlg){
        if (refleshFlg) {
            prott.getProjectsFromServer()
        }

        var projects = prott.getSavedprojects()
        var projectsList = []
        var separateFlg = false
        for(organzation in projects){
            if (projects[organzation].projects.count() == 0) {
                continue
            }
            if (separateFlg) {
                projectsList.push({name: "separate", id: nil})
            }else{
                separateFlg = true
            }
            projectsList.push({name: projects[organzation].name, id: nil})

            for(i = 0; i < projects[organzation].projects.count(); i++){
                projectsList.push({name: projects[organzation].projects[i].name, id: projects[organzation].projects[i].id})
            }
        }
        return projectsList
    },
    
    "isNewScreen": function(element) {
        var screens = prott.getAppScreens()
        if (!screens) {
            return true
        }
        
        var newScreenflg = true
        for(i = 0; i < [screens count]; i++){
            var screen = screens[i]
            if ([[screen objectForKey:"fileName"] isEqualToString:[element objectForKey:"fileName"]]) {
                newScreenflg = false
                break
            }
        }
        return newScreenflg
    },

    "getAppScreens": function() {
        var path = NSHomeDirectory() + prott.definations.uploadToAppBase + prott.getSavedValueFromKey("projectToSync") + "/"
        var fileManager = [NSFileManager defaultManager];
        var screens = nil
        if ([fileManager fileExistsAtPath:path+"screens.json"]) {

            var data = [NSData dataWithContentsOfFile:path+"screens.json"]
            var array = [NSJSONSerialization JSONObjectWithData:data
                                                  options:NSJSONReadingMutableContainers
                                                    error:nil]
            screens = array
        }

        return screens
    },

    "getAppProjects": function() {
        var path = NSHomeDirectory() + prott.definations.uploadToPluginBase
        var fileManager = [NSFileManager defaultManager];
        var array = []
        if ([fileManager fileExistsAtPath:path]) {

            var data = [NSData dataWithContentsOfFile:path+"projects.json"]
            array = [NSJSONSerialization JSONObjectWithData:data
                                                  options:NSJSONReadingMutableContainers
                                                    error:nil]
        }
        return array
    },

    "getAppProjectListMenu": function(){
        var projects = prott.getAppProjects()
        var menu = NSMenu.alloc().init()
        var userID = prott.getSavedValueFromKey("userID")
        for(i = 0; i < projects.count(); i++ ){ 
            var project = projects[i]
            if([[project objectForKey:"userID"] isEqualToString:userID]){
                var projectMenuItem = [[NSMenuItem alloc] initWithTitle:[project objectForKey:"name"] action:nil keyEquivalent:""]
                [menu addItem:projectMenuItem]
            }
        }
        [menu setAutoenablesItems:false]
        return menu
    },

    "getAppProjectList": function(refleshFlg){
        var projectsList = []
        var projects = prott.getAppProjects()
        var menu = NSMenu.alloc().init()
        var userID = prott.getSavedValueFromKey("userID")

        for(i = 0; i < projects.count(); i++ ){ 
            var project = projects[i]
            if([[project objectForKey:"userID"] isEqualToString:userID]){
                projectsList.push({name: [project objectForKey:"name"], id: [project objectForKey:"id"]})    
            }
        }
        return projectsList
    },

    "initialSettings": function(context, isAllArtboardSync){
        var response = prott.showLoginDialog(context)
        if(response[0] == 1000){
            var response = prott.loginWithEmailAndPassword(context, response[1], response[2])
            if(response == 1){
                prott.saveValueForKey(prott.definations.pluginVersion, "currentVersion")
                prott.showOptionDialog(context, isAllArtboardSync)
            }else{
                prott.showAlert("Oops! Something went wrong. Please check your login details and try again.", context)
                prott.initialSettings(context, isAllArtboardSync)
            }
        }
    },

    "loginWithEmailAndPassword": function(context, email, password){
        var url = [NSURL URLWithString:prott.definations.apiBase+prott.definations.apiSignin]
        var request = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestReloadIgnoringCacheData timeoutInterval:60]
        [request setHTTPMethod:"POST"]
        [request setValue:"sketch" forHTTPHeaderField:"User-Agent"]
        [request setValue:"application/json" forHTTPHeaderField:"Content-Type"]
        [request setValue:"sketch" forHTTPHeaderField:"App-Type"]

        var subParameter = {"email": email, "password": password}
        var parameter = {"user": subParameter}
        var postData = [NSJSONSerialization dataWithJSONObject:parameter options:0 error:nil]
        [request setHTTPBody:postData]
        var response = MOPointer.alloc().init()
        var error = MOPointer.alloc().init()
        var data = [NSURLConnection sendSynchronousRequest:request returningResponse:response error:error]

        if (error.value() == nil && data != nil){
            var res = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableLeaves error:nil]
            var cookie = [NSHTTPCookie cookiesWithResponseHeaderFields:response.value().valueForKey(@"allHeaderFields") forURL:[NSURL URLWithString:"/"]]
            var cookieForSave = prott.setArchivedObjectForData(cookie)
            var accountInfoValue = ""
            prott.saveValueForKey(cookieForSave, "cookie")
            prott.saveValueForKey(res.id, "userID")
            if (NSAppKitVersionNumber >= 1343) {
                accountInfoValue = res.uid+" ("+res.email+")"
            }else{
                accountInfoValue = res.email
            }
            prott.saveValueForKey(accountInfoValue, "accountInfo")
            prott.getProjectsFromServer()
            return true
        }else{
            return error.value()
        }
    },

    "logoutFromSketch": function(){
        prott.saveValueForKey(nil, "cookie")
        prott.saveValueForKey(nil, "accountInfo")
        prott.saveValueForKey(nil, "projects")
        prott.saveValueForKey(nil, "projectToSyncIndex")
        prott.saveValueForKey(nil, "userID")
        prott.saveValueForKey(nil, "currentVersion")

        var url = [NSURL URLWithString:prott.definations.apiBase+prott.definations.apiSignout]
        var request = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestReloadIgnoringCacheData timeoutInterval:60]
        [request setHTTPMethod:"DELETE"]
        [request setValue:"Sketch" forHTTPHeaderField:"User-Agent"]
        [request setValue:"application/json" forHTTPHeaderField:"Content-Type"]
        [request setValue:"sketch" forHTTPHeaderField:"App-Type"]

        var response = MOPointer.alloc().init()
        var error = MOPointer.alloc().init()
        var data = [NSURLConnection sendSynchronousRequest:request returningResponse:response error:error]
    },

    "getProjectsFromServer": function(){
        var url = [NSURL URLWithString:prott.definations.apiBase+prott.definations.apiProjects]

        var request = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestReloadIgnoringCacheData timeoutInterval:60]
        [request setHTTPMethod:"GET"]
        [request setValue:"sketch" forHTTPHeaderField:"User-Agent"]
        [request setValue:"application/json" forHTTPHeaderField:"Content-Type"]
        [request setValue:"sketch" forHTTPHeaderField:"App-Type"]

        var cookie = prott.getSavedCookie()
        var header = [NSHTTPCookie requestHeaderFieldsWithCookies:cookie]
        [request setAllHTTPHeaderFields:header]

        var response = MOPointer.alloc().init()
        var error = MOPointer.alloc().init()
        var data = [NSURLConnection sendSynchronousRequest:request returningResponse:response error:error]
        if (error.value() == nil && data != nil){
            var res = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableLeaves error:nil]
            var projectsForSave = prott.setArchivedObjectForData(res)
            prott.saveValueForKey(projectsForSave, "projects")
            return res
        }else{
            var res = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableLeaves error:nil]
            return error.value()
        }
    },

    "syncSelectedArtboards": function(context){
        var doc = context.document
        var selections = context.selection
        var loop = [selections objectEnumerator]
        // Web
        if (prott.getSavedValueFromKey("UploadPlatform") == 0) { 
            var count = 0
            var cookie = [NSHTTPCookie requestHeaderFieldsWithCookies:prott.getSavedCookie()]
            while (artboard = [loop nextObject]) {
                if (artboard.className() == "MSArtboardGroup") {
                    if (! prott.uploadArtboard(doc, artboard, cookie.Cookie, context)) {
                        break
                    }
                    count++
                }
            }
            if (count == 0) {
                prott.showAlert("You must select at least one artboard to sync.", context)
            }else{
                prott.showMessage("All selected artboards synced to Prott.", context)
            }
        } else if (prott.getSavedValueFromKey("UploadPlatform") == 1) { // Mac
            var array = prott.getAppScreens() ? prott.getAppScreens() : [[NSMutableArray alloc] initWithCapacity:0]
            while (artboard = [loop nextObject]) {
                if (artboard.className() == "MSArtboardGroup") {
                    var fileName = artboard.objectID() + ".png"
                    var artboardName = artboard.name()

                    var screenID = artboard.objectID()
                    var nameDictionary = {"fileName": fileName, "name": artboardName, "id": screenID}
                    if (prott.isNewScreen(nameDictionary)) {
                        [array addObject:nameDictionary]
                    }

                    prott.uploadArtboardToAppLibrary(doc, artboard, context)
                }
            }
            if (array.count() == 0) {
                prott.showAlert("You must select at least one artboard to sync.", context)
            }else{
                // json出力
                var jsonData = [NSJSONSerialization dataWithJSONObject:array options:0 error:nil];
                var localUploadDirPath = NSHomeDirectory() + prott.definations.uploadToAppBase + prott.getSavedValueFromKey("projectToSync") + "/"
                var jsonFilePath = localUploadDirPath + "/screens.json"
                [jsonData writeToFile:jsonFilePath atomically:true]
                prott.showMessage("All selected artboards synced to Prott for Mac.", context)
            }
            
        }
    },

    "syncAllArtboards": function(context){
        var doc = context.document
        var artboards = [[doc currentPage] artboards]
        var loop = [artboards objectEnumerator]
        if (prott.getSavedValueFromKey("UploadPlatform") == 0) { // Web
            var cookie = [NSHTTPCookie requestHeaderFieldsWithCookies:prott.getSavedCookie()]
            while (artboard = [loop nextObject]) {
                if (! prott.uploadArtboard(doc, artboard, cookie.Cookie, context)) {
                    break
                }
            }
        } else if (prott.getSavedValueFromKey("UploadPlatform") == 1) { // Mac
            var array = prott.getAppScreens() ? prott.getAppScreens() : [[NSMutableArray alloc] initWithCapacity:0]
            while (artboard = [loop nextObject]) {
                var fileName = artboard.objectID() + ".png"
                var artboardName = artboard.name()
                var screenID = artboard.objectID()
                var nameDictionary = {"fileName": fileName, "name": artboardName, "id": screenID}
                if (prott.isNewScreen(nameDictionary)) {
                    [array addObject:nameDictionary]
                }

                prott.uploadArtboardToAppLibrary(doc, artboard, context)
            }
            // json出力
            var jsonData = [NSJSONSerialization dataWithJSONObject:array options:0 error:nil];
            var localUploadDirPath = NSHomeDirectory() + prott.definations.uploadToAppBase + prott.getSavedValueFromKey("projectToSync") + "/"
            var jsonFilePath = localUploadDirPath + "/screens.json"
            [jsonData writeToFile:jsonFilePath atomically:true]
        }
        prott.showMessage("All artboards synced to Prott.", context)
    },

    /**
    * Upload artboard to prott
    * @return {boolean} Return ture when the upload is successful
    */
    "uploadArtboard": function(document, artboard, cookie, context){
        var copy = [artboard duplicate]
        var slice = MSExportRequest.exportRequestsFromExportableLayer(copy).firstObject()
        [copy removeFromParent]
        slice.scale = prott.getSavedValueFromKey("ratio")
        slice.format = "png"
        var filePath = NSTemporaryDirectory() + "prott/" + artboard.objectID() + ".png"
        [document saveArtboardOrSlice:slice toFile: filePath]

        var task = NSTask.alloc().init()
        task.setLaunchPath("/usr/bin/curl")
        var args = ["-X", "POST", "-H", "Content-Type: multipart/form-data", "-H", "App-Type: sketch", "-H", "X-Accept: application/json", "-b", cookie, "-F", "project_id=" + prott.getSavedValueFromKey("projectToSync"), "-F", "screen[sketch_artboard_id]=" + artboard.objectID(), "-F", "screen[name]=" + artboard.name(), "-F", "Content-Disposition: form-data; name=file; filename=filename; Content-Type=image/png;", "-F", "screen[file]=@" + filePath, prott.definations.apiBase+prott.definations.apiScreens]
        task.setArguments(args)
        var outputPipe = [NSPipe pipe]
        [task setStandardOutput:outputPipe]
        task.launch()

        var outputData = [[outputPipe fileHandleForReading] readDataToEndOfFile]
        var outputString = [[[NSString alloc] initWithData:outputData encoding:NSUTF8StringEncoding]]
        var outputArray = [NSJSONSerialization JSONObjectWithData:outputData options:NSJSONReadingAllowFragments error:nil]
        if(outputString != "successed"){
            if(outputString == " " || outputString == ""){
                prott.showAlert("Oops! Something went wrong. Please check if the project you tried to sync exists or if you have editing permission for the project.", context)
            }else if(outputString == "The screen you tried to sync cannot be updated because it is currently locked."){
                prott.showAlert("The screen you tried to sync cannot be updated because it is currently locked.", context)
            }else if(outputString == "The screen you tried to sync cannot be updated because it is currently archived."){
                prott.showAlert("The screen you tried to sync cannot be updated because it is currently archived.", context)
            }else if(outputString == "Request is invalid."){
                prott.showAlert("Request is invalid.", context)
            }else if(outputArray == nil){
                prott.showAlert(outputString, context)
            }
            else{
                prott.showAlert(outputArray["error"], context)
                if (outputArray["error"] == "セッションがタイムアウトしました。もう一度ログインしてください。" ||
                    outputArray["error"] == "You need to sign in or sign up before continuing.") {
                    prott.logoutFromSketch()
                }
            }
            return false;
        }
        return true;
    },

    "uploadArtboardToAppLibrary": function(document, artboard, context){
        var copy = [artboard duplicate]
        var slice = MSExportRequest.exportRequestsFromExportableLayer(copy).firstObject()
        [copy removeFromParent]
        slice.scale = prott.getSavedValueFromKey("ratio")
        slice.format = "png"
        var fromPath = NSTemporaryDirectory() + "prott/" + artboard.objectID() + ".png"
        [document saveArtboardOrSlice:slice toFile: fromPath]

        var fileManager = [NSFileManager defaultManager]
        var localUploadDirPath = NSHomeDirectory() + prott.definations.uploadToAppBase + prott.getSavedValueFromKey("projectToSync") + "/"
        var toPath = localUploadDirPath + artboard.objectID() + ".png"

        if ([fileManager fileExistsAtPath: localUploadDirPath] == false) {
             [fileManager createDirectoryAtPath:localUploadDirPath withIntermediateDirectories:true attributes:nil error:nil]
        }
        if ([fileManager fileExistsAtPath: toPath]) {
             [fileManager removeItemAtPath:toPath error:nil]
        }
        [fileManager moveItemAtPath:fromPath toPath:toPath error:nil]
    }
};
